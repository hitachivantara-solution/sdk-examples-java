package com.hitachivantara.example.hcp.content;

import java.io.File;
import java.io.IOException;
import java.util.List;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.SdkClientException;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ListObjectsV2Request;
import com.amazonaws.services.s3.model.ListObjectsV2Result;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import com.hitachivantara.example.hcp.util.Account;
import com.hitachivantara.example.hcp.util.HCPClients;

/**
 * S3 列出目录包括子目录示例
 * 
 * @author sohan
 *
 */
public class S3Example_ListObjectsV2 {

	public static void main(String[] args) throws IOException {
		AmazonS3 hs3Client = HCPClients.getInstance().getS3Client();

		// Here is the file will be uploaded into HCP
		File file = new File("C:\\VDisk\\DriverD\\Downloads\\Temp\\WeChat Image_20180716111626.doc");
		// The location in HCP where this file will be stored.
		String bucketName = Account.namespace;

		// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!HCP暂不支持ListObjectV2 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		{
			long i = 0;
			try {
				// Here is the folder path you want to list.
				String directoryKey = "sdk-test/moreThan100objs/";
				// String directoryKey = "";

				System.out.println("Listing objects");

				// maxKeys is set to 2 to demonstrate the use of
				// ListObjectsV2Result.getNextContinuationToken()
				ListObjectsV2Request request = new ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(5);// .withDelimiter("/");
				// request.withPrefix(directoryKey);
				ListObjectsV2Result result;

				do {
					result = hs3Client.listObjectsV2(request);

					List<S3ObjectSummary> dirs = result.getObjectSummaries();
					for (S3ObjectSummary objectSummary : dirs) {
						System.out.printf(" - %s (size: %d)\n", objectSummary.getKey(), objectSummary.getSize());
					}
					// If there are more than maxKeys keys in the bucket, get a continuation token
					// and list the next objects.
					// String token = result.getNextContinuationToken();
					// System.out.println("Next Continuation Token: " + token);
					// request.setContinuationToken(token);

					if (!dirs.isEmpty())
						request.setStartAfter(dirs.get(dirs.size() - 1).getKey());
				} while (result.isTruncated());

			} catch (AmazonServiceException e) {
				e.printStackTrace();
				return;
			} catch (SdkClientException e) {
				e.printStackTrace();
				return;
			}
		}

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	}

}
